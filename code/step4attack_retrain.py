# Import necessary packages
import numpy as np
from PIL import Image
import os
import tensorflow as tf
from tensorflow.keras.models import load_model
from sklearn.metrics import accuracy_score,f1_score,precision_score,recall_score,confusion_matrix

# Loading Generated Simhash
sh_data = os.path.join("/Entropy")

folders = ['Lollipop', 'Kelihos_ver3', 'Gatak', 'Kelihos_ver1', 'Obfuscator.ACY', 'Simda', 'Tracur', 'Vundo', 'Ramnit']

# capturing training data and labels into respective lists
images = []
labels = []

for folder in folders:
    sub_folder = os.path.join(sh_data, folder)
    print(sub_folder)
    for file_ in os.listdir(sub_folder):
        img_path = os.path.join(sub_folder, file_)
        with Image.open(img_path) as img:
            img = img.resize((224,224))
            img_array = np.array(img)
            img_array = img_array[:, :, :3]
            images.append(img_array)
            labels.append(folder)

# Loading Generated Simhash
sh_data = os.path.join("/SelectedGenData/Entropy")

folders = ['Lollipop', 'Kelihos_ver3', 'Gatak', 'Kelihos_ver1', 'Obfuscator.ACY', 'Simda', 'Tracur', 'Vundo', 'Ramnit']

for folder in folders:
    sub_folder = os.path.join(sh_data, folder)
    print(sub_folder)
    for file_ in os.listdir(sub_folder):
        img_path = os.path.join(sub_folder, file_)
        with Image.open(img_path) as img:
            img = img.resize((224,224))
            img_array = np.array(img)
            img_array = img_array[:, :, :3]
            images.append(img_array)
            labels.append(folder)

# convert the list into arrays
sh_images = np.array(images)
sh_image_labels = np.array(labels)

from sklearn.model_selection import train_test_split

x_train, x_test, y_train, y_test = train_test_split(sh_images, sh_image_labels, test_size=0.2, random_state=42)

print("X_train shape:",x_train.shape)
print("y_train shape:",y_train.shape)
print("X_test shape:",x_test.shape)
print("y_test shape:",y_test.shape)

#Encode labels from text to integers.
from sklearn import preprocessing

le = preprocessing.LabelEncoder()

le.fit(y_train)
y_train_encoded = le.transform(y_train) #train labels

le.fit(y_test)
y_test_encoded = le.transform(y_test) #test labels

# One-hot encode the labels
y_train_encoded = tf.keras.utils.to_categorical(y_train_encoded, num_classes=9)
y_test_encoded = tf.keras.utils.to_categorical(y_test_encoded, num_classes = 9)

model = load_model("/Model[NEW]big_Entropy_img_vgg.h5")
model.summary()

predictions = model.predict(x_test)

y_predict = np.argmax(predictions, axis=1)
y_actual = np.argmax(y_test_encoded, axis=1)

from sklearn.metrics import confusion_matrix
from matplotlib import pyplot as plt

label = np.arange(9)
matrix = confusion_matrix(y_predict,y_actual,normalize = 'true')
#print(matrix)
import seaborn as sns

plt.figure(figsize=(40,30))
sns.set(font_scale=1.8)
fx=sns.heatmap(matrix, annot=True,fmt='.4f',cmap="GnBu")
fx.set_title('Confusion Matrix \n');
fx.set_xlabel('\n Predicted Values\n')
fx.set_ylabel('Actual Values\n');
fx.xaxis.set_ticklabels(folders)
fx.yaxis.set_ticklabels(folders)
plt.show()

accuracy = accuracy_score(y_actual, y_predict)
print(f'Accuracy: {accuracy:.4f}')

# Calculate precision, recall, and F1-score
precision = precision_score(y_actual, y_predict, average='weighted')
recall = recall_score(y_actual, y_predict, average='weighted')
f1 = f1_score(y_actual, y_predict, average='weighted')
macro_f1 = f1_score(y_actual, y_predict, average='macro')

print(f'Precision: {precision:.4f}')
print(f'Recall: {recall:.4f}')
print(f'F1-score: {f1:.4f}')
print(f'Macro F1-score: {macro_f1:.4f}')

from sklearn.metrics import classification_report
import time
import pandas as pd

y_true = y_test_encoded  # True labels (ground truth)


#test_images = [hex_x_test, en_x_test]

test_images = sh_images
start_time = time.time()
y_pred = model.predict(test_images)
end_time = time.time()
print(f"Prediction time: {end_time - start_time}")

# Convert probabilities to class labels
y_pred_classes = np.argmax(y_pred, axis=1)

# Convert one-hot encoded true labels to class labels
y_true_classes = np.argmax(y_true, axis=1)

classes = ['Lollipop', 'Kelihos_ver3', 'Gatak', 'Kelihos_ver1', 'Obfuscator.ACY', 'Simda', 'Tracur', 'Vundo', 'Ramnit']

# Generate the classification report
report_dict = classification_report(y_true_classes, y_pred_classes, target_names=classes, output_dict=True)
report = pd.DataFrame(report_dict).transpose()

print(report)

#Set the path and filename for the CSV file
file_path = "/After_Attack/"
file_name = "EG_classification_report.csv"

report.to_csv(file_path + file_name)

"""##**Data Selection**"""





"""#**Re-training**"""

model.fit(x_train, y_train_encoded, epochs=50, batch_size=32, validation_data=(x_test, y_test_encoded))

predictions = model.predict(x_test)
y_predict = np.argmax(predictions, axis=1)
y_actual = np.argmax(y_test_encoded, axis=1)

accuracy = accuracy_score(y_actual, y_predict)
print(f'Accuracy: {accuracy:.4f}')

# Calculate precision, recall, and F1-score
precision = precision_score(y_actual, y_predict, average='weighted')
recall = recall_score(y_actual, y_predict, average='weighted')
f1 = f1_score(y_actual, y_predict, average='weighted')
macro_f1 = f1_score(y_actual, y_predict, average='macro')

print(f'Precision: {precision:.4f}')
print(f'Recall: {recall:.4f}')
print(f'F1-score: {f1:.4f}')
print(f'Macro F1-score: {macro_f1:.4f}')

from sklearn.metrics import classification_report
import time
import pandas as pd

y_true = y_test_encoded  # True labels (ground truth)


#test_images = [hex_x_test, en_x_test]

test_images = x_test
start_time = time.time()
y_pred = model.predict(test_images)
end_time = time.time()
print(f"Prediction time: {end_time - start_time}")

# Convert probabilities to class labels
y_pred_classes = np.argmax(y_pred, axis=1)

# Convert one-hot encoded true labels to class labels
y_true_classes = np.argmax(y_true, axis=1)

classes = ['Lollipop', 'Kelihos_ver3', 'Gatak', 'Kelihos_ver1', 'Obfuscator.ACY', 'Simda', 'Tracur', 'Vundo', 'Ramnit']

# Generate the classification report
report_dict = classification_report(y_true_classes, y_pred_classes, target_names=classes, output_dict=True)
report = pd.DataFrame(report_dict).transpose()

print(report)

#Set the path and filename for the CSV file
file_path = "/Re_trained/"
file_name = "SH_ReTrained_classification_report.csv"

report.to_csv(file_path + file_name)

