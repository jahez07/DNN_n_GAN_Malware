# -*- coding: utf-8 -*-
"""Step3Attack.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/13bmIU_x005RhggzXF9SFAYI14XuIWyJ-
"""

from google.colab import drive
drive.mount('/content/drive')

import numpy as np
from PIL import Image
import matplotlib.pyplot as plt
import os
import tensorflow as tf
from sklearn import preprocessing
from tensorflow.keras.models import load_model
from skimage.metrics import structural_similarity

# Loading each family
data_path = os.path.join("/content/drive/MyDrive/Jahez_Vinod_2023/DMD(MainProject)/GAN/GeneratedGrayscale")
folders = ['Lollipop', 'Kelihos_ver3', 'Gatak', 'Kelihos_ver1', 'Obfuscator.ACY', 'Simda', 'Tracur', 'Vundo', 'Ramnit']

# capturing training data and labels into respective lists
images = []
labels = []

for folder in folders:
  sub_folder = os.path.join(data_path, folder)
  print(sub_folder)
  for file_ in os.listdir(sub_folder):
    img_path = os.path.join(sub_folder, file_)
    with Image.open(img_path) as img:
      img = img.resize((224, 224))
      img = np.array(img)
      img= img[:, :, :3]
      images.append(img)
      labels.append(folder)

# Converting list of images and labels to numpy array
image = np.array(images)
label = np.array(labels)

le = preprocessing.LabelEncoder()
print(label)
le.fit(label)
label_encoded = le.transform(label)
print(label_encoded)

# One-Hot encoding the labels
label_encoded = tf.keras.utils.to_categorical(label_encoded, num_classes=9)
print(label_encoded[1])

image.shape

# Loading refernce image

# Data processing function
def process(path):
  with Image.open(path) as img:
    img = img.resize((224, 224))
    img = np.array(img)
    img= img[:, :, :3]
    return img

# Path to each family
g_path = os.path.join(f"/content/drive/MyDrive/Jahez_Vinod_2023/Big2015/RootDirectory/Grayscale/Gatak/01azqd4InC7m9JpocGv5.asm.txt.txt.png")
k1_path = os.path.join(f"/content/drive/MyDrive/Jahez_Vinod_2023/Big2015/RootDirectory/Grayscale/Kelihos_ver1/09LXtWxm1EbK5uVqcQS3.asm.txt.txt.png")
k3_path = os.path.join(f"/content/drive/MyDrive/Jahez_Vinod_2023/Big2015/RootDirectory/Grayscale/Kelihos_ver3/04BfoQRA6XEshiNuI7pF.asm.txt.txt.png")
l_path = os.path.join(f"/content/drive/MyDrive/Jahez_Vinod_2023/Big2015/RootDirectory/Grayscale/Lollipop/01IsoiSMh5gxyDYTl4CB.asm.txt.txt.png")
ob_path = os.path.join(f"/content/drive/MyDrive/Jahez_Vinod_2023/Big2015/RootDirectory/Grayscale/Obfuscator.ACY/01SuzwMJEIXsK7A8dQbl.asm.txt.txt.png")
r_path = os.path.join(f"/content/drive/MyDrive/Jahez_Vinod_2023/Big2015/RootDirectory/Grayscale/Ramnit/01kcPWA9K2BOxQeS5Rju.asm.txt.txt.png")
s_path = os.path.join(f"/content/drive/MyDrive/Jahez_Vinod_2023/Big2015/RootDirectory/Grayscale/Simda/0qjuDC7Rhx9rHkLlItAp.asm.txt.txt.png")
t_path = os.path.join(f"/content/drive/MyDrive/Jahez_Vinod_2023/Big2015/RootDirectory/Grayscale/Tracur/02IOCvYEy8mjiuAQHax3.asm.txt.txt.png")
v_path = os.path.join(f"/content/drive/MyDrive/Jahez_Vinod_2023/Big2015/RootDirectory/Grayscale/Vundo/0qPGt4cRVk9NoiJgubf2.asm.txt.txt.png")

Gatak = process(g_path)
Kelihos_ver1 = process(k1_path)
Kelihos_ver3 = process(k3_path)
Lollipop = process(l_path)
Obfuscator = process(ob_path)
Ramnit = process(r_path)
Simda = process(s_path)
Tracur = process(t_path)
Vundo = process(v_path)

model = load_model("/content/drive/MyDrive/Jahez_Vinod_2023/Big2015/grayScale/Models/Model[NEW]big_SimHash_img_vgg.h5")
predictions = model.predict(image)

# SSIM
def structural_sim(img1, img2):
  sim, diff = structural_similarity(img1, img2, full=True, channel_axis=2)
  return sim

count = 0
for i in range(len(predictions)):
  pred_class_index = predictions[i].argmax()
  pred_class = le.inverse_transform([pred_class_index])[0]
  if pred_class == 'Lollipop' and label[i] == 'Lollipop':
    count += 1
print(count)

families = [Lollipop, Kelihos_ver3, Gatak, Kelihos_ver1, Obfuscator, Simda, Tracur, Vundo, Ramnit]

folders = ['Lollipop', 'Kelihos_ver3', 'Gatak', 'Kelihos_ver1', 'Obfuscator.ACY', 'Simda', 'Tracur', 'Vundo', 'Ramnit']

path = os.path.join("/content/drive/MyDrive/Jahez_Vinod_2023/DMD(MainProject)/GAN/SelectedGenData/Grayscale")
count = 0
for i in range(len(predictions)):
  pred_class_index = predictions[i].argmax()
  pred_class = le.inverse_transform([pred_class_index])[0]

  for j, folder in enumerate(folders):
    # Checking classification and selecting images
    if pred_class == folder or label[i] == folder:
      if pred_class == folder and label[i] == folder:
        img = Image.fromarray(image[i])
        img.save(f"{path}/{pred_class}/Gen({pred_class})_{i}.png")
        print(f"Saved{pred_class}_{i}")
        count += 1
      else:
        simm = structural_sim(families[j], image[i])
        if simm > 0.7:
          img = Image.fromarray(image[i])
          img.save(f"{path}/{pred_class}/Gen({pred_class})_{i}.png")
          print(f"Saved{pred_class}_{i}_SSIM")
          count += 1
print(count)

